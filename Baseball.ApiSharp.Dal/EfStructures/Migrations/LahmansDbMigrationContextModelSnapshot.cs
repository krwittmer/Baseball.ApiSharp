// <auto-generated />
using System;
using Baseball.ApiSharp.Dal.EfStructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Baseball.ApiSharp.Dal.EfStructures.Migrations
{
    [DbContext(typeof(LahmansDbMigrationContext))]
    partial class LahmansDbMigrationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Allstarfull", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("GameId")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("gameID");

                    b.Property<short>("GameNum")
                        .HasColumnType("smallint")
                        .HasColumnName("gameNum");

                    b.Property<short?>("Gp")
                        .HasColumnType("smallint")
                        .HasColumnName("GP");

                    b.Property<string>("LgId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("playerID");

                    b.Property<short?>("StartingPos")
                        .HasColumnType("smallint")
                        .HasColumnName("startingPos");

                    b.Property<string>("TeamId")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("teamID")
                        .IsFixedLength();

                    b.Property<int?>("TeamId1")
                        .HasColumnType("int")
                        .HasColumnName("team_ID");

                    b.Property<short?>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LgId" }, "lgID");

                    b.HasIndex(new[] { "PlayerId", "YearId", "GameNum", "GameId", "LgId" }, "playerID")
                        .IsUnique();

                    b.HasIndex(new[] { "TeamId1" }, "team_ID");

                    b.ToTable("allstarfull", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Appearance", b =>
                {
                    b.Property<short?>("G1b")
                        .HasColumnType("smallint")
                        .HasColumnName("G_1b");

                    b.Property<short?>("G2b")
                        .HasColumnType("smallint")
                        .HasColumnName("G_2b");

                    b.Property<short?>("G3b")
                        .HasColumnType("smallint")
                        .HasColumnName("G_3b");

                    b.Property<short?>("GAll")
                        .HasColumnType("smallint")
                        .HasColumnName("G_all");

                    b.Property<short?>("GBatting")
                        .HasColumnType("smallint")
                        .HasColumnName("G_batting");

                    b.Property<short?>("GC")
                        .HasColumnType("smallint")
                        .HasColumnName("G_c");

                    b.Property<short?>("GCf")
                        .HasColumnType("smallint")
                        .HasColumnName("G_cf");

                    b.Property<short?>("GDefense")
                        .HasColumnType("smallint")
                        .HasColumnName("G_defense");

                    b.Property<short?>("GDh")
                        .HasColumnType("smallint")
                        .HasColumnName("G_dh");

                    b.Property<short?>("GLf")
                        .HasColumnType("smallint")
                        .HasColumnName("G_lf");

                    b.Property<short?>("GOf")
                        .HasColumnType("smallint")
                        .HasColumnName("G_of");

                    b.Property<short?>("GP")
                        .HasColumnType("smallint")
                        .HasColumnName("G_p");

                    b.Property<short?>("GPh")
                        .HasColumnType("smallint")
                        .HasColumnName("G_ph");

                    b.Property<short?>("GPr")
                        .HasColumnType("smallint")
                        .HasColumnName("G_pr");

                    b.Property<short?>("GRf")
                        .HasColumnType("smallint")
                        .HasColumnName("G_rf");

                    b.Property<short?>("GSs")
                        .HasColumnType("smallint")
                        .HasColumnName("G_ss");

                    b.Property<short?>("Gs")
                        .HasColumnType("smallint")
                        .HasColumnName("GS");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("LgId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("playerID");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("teamID")
                        .IsFixedLength();

                    b.Property<int?>("TeamId1")
                        .HasColumnType("int")
                        .HasColumnName("team_ID");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.HasIndex(new[] { "Id", "YearId", "TeamId", "PlayerId" }, "comp_indx");

                    b.HasIndex(new[] { "LgId" }, "lgID");

                    b.HasIndex(new[] { "PlayerId" }, "playerID");

                    b.HasIndex(new[] { "TeamId1" }, "team_ID");

                    b.ToTable("appearances", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Awardsmanager", b =>
                {
                    b.Property<string>("AwardId")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("awardID");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("LgId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("notes");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("playerID");

                    b.Property<string>("Tie")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("tie");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.HasIndex(new[] { "Id", "PlayerId", "AwardId", "YearId" }, "comp_indx");

                    b.HasIndex(new[] { "LgId" }, "lgID");

                    b.HasIndex(new[] { "PlayerId" }, "playerID");

                    b.ToTable("awardsmanagers", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Awardsplayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("AwardId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("awardID");

                    b.Property<string>("LgId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<string>("Notes")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("notes");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("playerID");

                    b.Property<string>("Tie")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("tie");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LgId" }, "lgID")
                        .HasDatabaseName("lgID1");

                    b.HasIndex(new[] { "PlayerId", "AwardId", "YearId", "LgId" }, "playerID")
                        .IsUnique()
                        .HasDatabaseName("playerID1");

                    b.ToTable("awardsplayers", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Awardssharemanager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("AwardId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("awardID");

                    b.Property<string>("LgId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("playerID");

                    b.Property<short?>("PointsMax")
                        .HasColumnType("smallint")
                        .HasColumnName("pointsMax");

                    b.Property<short?>("PointsWon")
                        .HasColumnType("smallint")
                        .HasColumnName("pointsWon");

                    b.Property<short?>("VotesFirst")
                        .HasColumnType("smallint")
                        .HasColumnName("votesFirst");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LgId" }, "lgID")
                        .HasDatabaseName("lgID2");

                    b.HasIndex(new[] { "PlayerId", "AwardId", "YearId", "LgId" }, "playerID")
                        .IsUnique()
                        .HasDatabaseName("playerID2");

                    b.ToTable("awardssharemanagers", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Awardsshareplayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("AwardId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("awardID");

                    b.Property<string>("LgId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("playerID");

                    b.Property<short?>("PointsMax")
                        .HasColumnType("smallint")
                        .HasColumnName("pointsMax");

                    b.Property<double?>("PointsWon")
                        .HasColumnType("double")
                        .HasColumnName("pointsWon");

                    b.Property<double?>("VotesFirst")
                        .HasColumnType("double")
                        .HasColumnName("votesFirst");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LgId" }, "lgID")
                        .HasDatabaseName("lgID3");

                    b.HasIndex(new[] { "PlayerId", "AwardId", "YearId", "LgId" }, "playerID")
                        .IsUnique()
                        .HasDatabaseName("playerID3");

                    b.ToTable("awardsshareplayers", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Batting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<short?>("Ab")
                        .HasColumnType("smallint")
                        .HasColumnName("AB");

                    b.Property<short?>("Bb")
                        .HasColumnType("smallint")
                        .HasColumnName("BB");

                    b.Property<short?>("Cs")
                        .HasColumnType("smallint")
                        .HasColumnName("CS");

                    b.Property<short?>("G")
                        .HasColumnType("smallint");

                    b.Property<short?>("GBatting")
                        .HasColumnType("smallint")
                        .HasColumnName("G_batting");

                    b.Property<short?>("Gidp")
                        .HasColumnType("smallint")
                        .HasColumnName("GIDP");

                    b.Property<short?>("H")
                        .HasColumnType("smallint");

                    b.Property<short?>("Hbp")
                        .HasColumnType("smallint")
                        .HasColumnName("HBP");

                    b.Property<short?>("Hr")
                        .HasColumnType("smallint")
                        .HasColumnName("HR");

                    b.Property<short?>("Ibb")
                        .HasColumnType("smallint")
                        .HasColumnName("IBB");

                    b.Property<string>("LgId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("playerID");

                    b.Property<short?>("R")
                        .HasColumnType("smallint");

                    b.Property<short?>("Rbi")
                        .HasColumnType("smallint")
                        .HasColumnName("RBI");

                    b.Property<short?>("Sb")
                        .HasColumnType("smallint")
                        .HasColumnName("SB");

                    b.Property<short?>("Sf")
                        .HasColumnType("smallint")
                        .HasColumnName("SF");

                    b.Property<short?>("Sh")
                        .HasColumnType("smallint")
                        .HasColumnName("SH");

                    b.Property<short?>("So")
                        .HasColumnType("smallint")
                        .HasColumnName("SO");

                    b.Property<short>("Stint")
                        .HasColumnType("smallint")
                        .HasColumnName("stint");

                    b.Property<string>("TeamId")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("teamID")
                        .IsFixedLength();

                    b.Property<int?>("TeamId1")
                        .HasColumnType("int")
                        .HasColumnName("team_ID");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.Property<short?>("_2b")
                        .HasColumnType("smallint")
                        .HasColumnName("2B");

                    b.Property<short?>("_3b")
                        .HasColumnType("smallint")
                        .HasColumnName("3B");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LgId" }, "lgID")
                        .HasDatabaseName("lgID4");

                    b.HasIndex(new[] { "PlayerId", "YearId", "Stint" }, "playerID")
                        .IsUnique()
                        .HasDatabaseName("playerID4");

                    b.HasIndex(new[] { "TeamId1" }, "team_ID")
                        .HasDatabaseName("team_ID1");

                    b.ToTable("batting", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Battingpost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<short?>("Ab")
                        .HasColumnType("smallint")
                        .HasColumnName("AB");

                    b.Property<short?>("Bb")
                        .HasColumnType("smallint")
                        .HasColumnName("BB");

                    b.Property<short?>("Cs")
                        .HasColumnType("smallint")
                        .HasColumnName("CS");

                    b.Property<short?>("G")
                        .HasColumnType("smallint");

                    b.Property<short?>("Gidp")
                        .HasColumnType("smallint")
                        .HasColumnName("GIDP");

                    b.Property<short?>("H")
                        .HasColumnType("smallint");

                    b.Property<short?>("Hbp")
                        .HasColumnType("smallint")
                        .HasColumnName("HBP");

                    b.Property<short?>("Hr")
                        .HasColumnType("smallint")
                        .HasColumnName("HR");

                    b.Property<short?>("Ibb")
                        .HasColumnType("smallint")
                        .HasColumnName("IBB");

                    b.Property<string>("LgId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("playerID");

                    b.Property<short?>("R")
                        .HasColumnType("smallint");

                    b.Property<short?>("Rbi")
                        .HasColumnType("smallint")
                        .HasColumnName("RBI");

                    b.Property<string>("Round")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("round");

                    b.Property<short?>("Sb")
                        .HasColumnType("smallint")
                        .HasColumnName("SB");

                    b.Property<short?>("Sf")
                        .HasColumnType("smallint")
                        .HasColumnName("SF");

                    b.Property<short?>("Sh")
                        .HasColumnType("smallint")
                        .HasColumnName("SH");

                    b.Property<short?>("So")
                        .HasColumnType("smallint")
                        .HasColumnName("SO");

                    b.Property<string>("TeamId")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("teamID")
                        .IsFixedLength();

                    b.Property<int?>("TeamId1")
                        .HasColumnType("int")
                        .HasColumnName("team_ID");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.Property<short?>("_2b")
                        .HasColumnType("smallint")
                        .HasColumnName("2B");

                    b.Property<short?>("_3b")
                        .HasColumnType("smallint")
                        .HasColumnName("3B");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LgId" }, "lgID")
                        .HasDatabaseName("lgID5");

                    b.HasIndex(new[] { "PlayerId" }, "playerID")
                        .HasDatabaseName("playerID5");

                    b.HasIndex(new[] { "TeamId1" }, "team_ID")
                        .HasDatabaseName("team_ID2");

                    b.HasIndex(new[] { "YearId", "Round", "PlayerId" }, "yearID")
                        .IsUnique();

                    b.ToTable("battingpost", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Collegeplaying", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("playerID");

                    b.Property<string>("SchoolId")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("schoolID");

                    b.Property<short?>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PlayerId" }, "playerID")
                        .HasDatabaseName("playerID6");

                    b.HasIndex(new[] { "SchoolId" }, "schoolID");

                    b.ToTable("collegeplaying", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Active")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .HasColumnName("active")
                        .IsFixedLength();

                    b.Property<string>("DivId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("divID")
                        .IsFixedLength();

                    b.Property<string>("Division1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("division");

                    b.Property<string>("LgId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DivId", "LgId" }, "divID")
                        .IsUnique();

                    b.HasIndex(new[] { "LgId" }, "lgID")
                        .HasDatabaseName("lgID6");

                    b.ToTable("divisions", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.ExtendedSchema.Tag", b =>
                {
                    b.Property<string>("TagId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("DataFieldReferencesAsJson")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("TagValue")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.ExtendedSchema.TagRelationship", b =>
                {
                    b.Property<string>("TagRelationshipId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("DataEntityId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TagId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("TagRelationshipId");

                    b.ToTable("TagRelationships");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Fielding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<short?>("A")
                        .HasColumnType("smallint");

                    b.Property<short?>("Cs")
                        .HasColumnType("smallint")
                        .HasColumnName("CS");

                    b.Property<short?>("Dp")
                        .HasColumnType("smallint")
                        .HasColumnName("DP");

                    b.Property<short?>("E")
                        .HasColumnType("smallint");

                    b.Property<short?>("G")
                        .HasColumnType("smallint");

                    b.Property<short?>("Gs")
                        .HasColumnType("smallint")
                        .HasColumnName("GS");

                    b.Property<short?>("InnOuts")
                        .HasColumnType("smallint");

                    b.Property<string>("LgId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<short?>("Pb")
                        .HasColumnType("smallint")
                        .HasColumnName("PB");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("playerID");

                    b.Property<short?>("Po")
                        .HasColumnType("smallint")
                        .HasColumnName("PO");

                    b.Property<string>("Pos")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("POS");

                    b.Property<short?>("Sb")
                        .HasColumnType("smallint")
                        .HasColumnName("SB");

                    b.Property<short>("Stint")
                        .HasColumnType("smallint")
                        .HasColumnName("stint");

                    b.Property<string>("TeamId")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("teamID")
                        .IsFixedLength();

                    b.Property<int?>("TeamId1")
                        .HasColumnType("int")
                        .HasColumnName("team_ID");

                    b.Property<short?>("Wp")
                        .HasColumnType("smallint")
                        .HasColumnName("WP");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.Property<double?>("Zr")
                        .HasColumnType("double")
                        .HasColumnName("ZR");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LgId" }, "lgID")
                        .HasDatabaseName("lgID7");

                    b.HasIndex(new[] { "PlayerId", "YearId", "Stint", "Pos" }, "playerID")
                        .IsUnique()
                        .HasDatabaseName("playerID7");

                    b.HasIndex(new[] { "TeamId1" }, "team_ID")
                        .HasDatabaseName("team_ID3");

                    b.ToTable("fielding", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Fieldingof", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<short?>("Gcf")
                        .HasColumnType("smallint");

                    b.Property<short?>("Glf")
                        .HasColumnType("smallint");

                    b.Property<short?>("Grf")
                        .HasColumnType("smallint");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("playerID");

                    b.Property<short>("Stint")
                        .HasColumnType("smallint")
                        .HasColumnName("stint");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PlayerId", "YearId", "Stint" }, "playerID")
                        .IsUnique()
                        .HasDatabaseName("playerID8");

                    b.ToTable("fieldingof", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Fieldingofsplit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<short?>("A")
                        .HasColumnType("smallint");

                    b.Property<short?>("Cs")
                        .HasColumnType("smallint")
                        .HasColumnName("CS");

                    b.Property<short?>("Dp")
                        .HasColumnType("smallint")
                        .HasColumnName("DP");

                    b.Property<short?>("E")
                        .HasColumnType("smallint");

                    b.Property<short?>("G")
                        .HasColumnType("smallint");

                    b.Property<short?>("Gs")
                        .HasColumnType("smallint")
                        .HasColumnName("GS");

                    b.Property<short?>("InnOuts")
                        .HasColumnType("smallint");

                    b.Property<string>("LgId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<short?>("Pb")
                        .HasColumnType("smallint")
                        .HasColumnName("PB");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("playerID");

                    b.Property<short?>("Po")
                        .HasColumnType("smallint")
                        .HasColumnName("PO");

                    b.Property<string>("Pos")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("POS");

                    b.Property<short?>("Sb")
                        .HasColumnType("smallint")
                        .HasColumnName("SB");

                    b.Property<short>("Stint")
                        .HasColumnType("smallint")
                        .HasColumnName("stint");

                    b.Property<string>("TeamId")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("teamID")
                        .IsFixedLength();

                    b.Property<int?>("TeamId1")
                        .HasColumnType("int")
                        .HasColumnName("team_ID");

                    b.Property<short?>("Wp")
                        .HasColumnType("smallint")
                        .HasColumnName("WP");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.Property<double?>("Zr")
                        .HasColumnType("double")
                        .HasColumnName("ZR");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LgId" }, "lgID")
                        .HasDatabaseName("lgID8");

                    b.HasIndex(new[] { "PlayerId", "YearId", "Stint", "Pos" }, "playerID")
                        .IsUnique()
                        .HasDatabaseName("playerID9");

                    b.HasIndex(new[] { "TeamId1" }, "team_ID")
                        .HasDatabaseName("team_ID4");

                    b.ToTable("fieldingofsplit", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Fieldingpost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<short?>("A")
                        .HasColumnType("smallint");

                    b.Property<short?>("Cs")
                        .HasColumnType("smallint")
                        .HasColumnName("CS");

                    b.Property<short?>("Dp")
                        .HasColumnType("smallint")
                        .HasColumnName("DP");

                    b.Property<short?>("E")
                        .HasColumnType("smallint");

                    b.Property<short?>("G")
                        .HasColumnType("smallint");

                    b.Property<short?>("Gs")
                        .HasColumnType("smallint")
                        .HasColumnName("GS");

                    b.Property<short?>("InnOuts")
                        .HasColumnType("smallint");

                    b.Property<string>("LgId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<short?>("Pb")
                        .HasColumnType("smallint")
                        .HasColumnName("PB");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("playerID");

                    b.Property<short?>("Po")
                        .HasColumnType("smallint")
                        .HasColumnName("PO");

                    b.Property<string>("Pos")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("POS");

                    b.Property<string>("Round")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("round");

                    b.Property<short?>("Sb")
                        .HasColumnType("smallint")
                        .HasColumnName("SB");

                    b.Property<string>("TeamId")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("teamID")
                        .IsFixedLength();

                    b.Property<int?>("TeamId1")
                        .HasColumnType("int")
                        .HasColumnName("team_ID");

                    b.Property<short?>("Tp")
                        .HasColumnType("smallint")
                        .HasColumnName("TP");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LgId" }, "lgID")
                        .HasDatabaseName("lgID9");

                    b.HasIndex(new[] { "PlayerId", "YearId", "Round", "Pos" }, "playerID")
                        .IsUnique()
                        .HasDatabaseName("playerID10");

                    b.HasIndex(new[] { "TeamId1" }, "team_ID")
                        .HasDatabaseName("team_ID5");

                    b.ToTable("fieldingpost", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Halloffame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<short?>("Ballots")
                        .HasColumnType("smallint")
                        .HasColumnName("ballots");

                    b.Property<string>("Category")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("category");

                    b.Property<string>("Inducted")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("inducted");

                    b.Property<short?>("Needed")
                        .HasColumnType("smallint")
                        .HasColumnName("needed");

                    b.Property<string>("NeededNote")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("needed_note");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("playerID");

                    b.Property<string>("VotedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("votedBy");

                    b.Property<short?>("Votes")
                        .HasColumnType("smallint")
                        .HasColumnName("votes");

                    b.Property<short>("Yearid")
                        .HasColumnType("smallint")
                        .HasColumnName("yearid");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PlayerId", "Yearid", "VotedBy" }, "playerID")
                        .IsUnique()
                        .HasDatabaseName("playerID11");

                    b.ToTable("halloffame", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Homegame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("Attendance")
                        .HasColumnType("int")
                        .HasColumnName("attendance");

                    b.Property<int?>("Games")
                        .HasColumnType("int")
                        .HasColumnName("games");

                    b.Property<string>("Leaguekey")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("leaguekey")
                        .IsFixedLength();

                    b.Property<int?>("Openings")
                        .HasColumnType("int")
                        .HasColumnName("openings");

                    b.Property<int?>("ParkId")
                        .HasColumnType("int")
                        .HasColumnName("park_ID");

                    b.Property<string>("Parkkey")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("parkkey");

                    b.Property<string>("Spanfirst")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("spanfirst");

                    b.Property<DateOnly?>("SpanfirstDate")
                        .HasColumnType("date")
                        .HasColumnName("spanfirst_date");

                    b.Property<string>("Spanlast")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("spanlast");

                    b.Property<DateOnly?>("SpanlastDate")
                        .HasColumnType("date")
                        .HasColumnName("spanlast_date");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_ID");

                    b.Property<string>("Teamkey")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("teamkey")
                        .IsFixedLength();

                    b.Property<int?>("Yearkey")
                        .HasColumnType("int")
                        .HasColumnName("yearkey");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Leaguekey" }, "leaguekey");

                    b.HasIndex(new[] { "ParkId" }, "park_ID");

                    b.HasIndex(new[] { "TeamId" }, "team_ID")
                        .HasDatabaseName("team_ID6");

                    b.ToTable("homegames", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.League", b =>
                {
                    b.Property<string>("LgId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<string>("Active")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .HasColumnName("active")
                        .IsFixedLength();

                    b.Property<string>("League1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("league");

                    b.HasKey("LgId")
                        .HasName("PRIMARY");

                    b.ToTable("leagues", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<short?>("G")
                        .HasColumnType("smallint");

                    b.Property<short>("Inseason")
                        .HasColumnType("smallint")
                        .HasColumnName("inseason");

                    b.Property<short?>("L")
                        .HasColumnType("smallint");

                    b.Property<string>("LgId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<string>("PlayerId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("playerID");

                    b.Property<string>("PlyrMgr")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("plyrMgr");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("teamID")
                        .IsFixedLength();

                    b.Property<int?>("TeamId1")
                        .HasColumnType("int")
                        .HasColumnName("team_ID");

                    b.Property<short?>("TeamRank")
                        .HasColumnType("smallint")
                        .HasColumnName("teamRank");

                    b.Property<short?>("W")
                        .HasColumnType("smallint");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LgId" }, "lgID")
                        .HasDatabaseName("lgID10");

                    b.HasIndex(new[] { "PlayerId" }, "playerID")
                        .HasDatabaseName("playerID12");

                    b.HasIndex(new[] { "TeamId1" }, "team_ID")
                        .HasDatabaseName("team_ID7");

                    b.HasIndex(new[] { "YearId", "TeamId", "Inseason" }, "yearID")
                        .IsUnique()
                        .HasDatabaseName("yearID1");

                    b.ToTable("managers", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Managershalf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<short?>("G")
                        .HasColumnType("smallint");

                    b.Property<short>("Half")
                        .HasColumnType("smallint")
                        .HasColumnName("half");

                    b.Property<short?>("Inseason")
                        .HasColumnType("smallint")
                        .HasColumnName("inseason");

                    b.Property<short?>("L")
                        .HasColumnType("smallint");

                    b.Property<string>("LgId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("playerID");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("teamID")
                        .IsFixedLength();

                    b.Property<int?>("TeamId1")
                        .HasColumnType("int")
                        .HasColumnName("team_ID");

                    b.Property<short?>("TeamRank")
                        .HasColumnType("smallint")
                        .HasColumnName("teamRank");

                    b.Property<short?>("W")
                        .HasColumnType("smallint");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LgId" }, "lgID")
                        .HasDatabaseName("lgID11");

                    b.HasIndex(new[] { "PlayerId", "YearId", "TeamId", "Half" }, "playerID")
                        .IsUnique()
                        .HasDatabaseName("playerID13");

                    b.HasIndex(new[] { "TeamId1" }, "team_ID")
                        .HasDatabaseName("team_ID8");

                    b.ToTable("managershalf", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Park", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("country");

                    b.Property<string>("Parkalias")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("parkalias");

                    b.Property<string>("Parkkey")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("parkkey");

                    b.Property<string>("Parkname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("parkname");

                    b.Property<string>("State")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.ToTable("parks", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Person", b =>
                {
                    b.Property<string>("PlayerId")
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("playerID");

                    b.Property<string>("Bats")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("bats");

                    b.Property<string>("BbrefId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("bbrefID");

                    b.Property<string>("BirthCity")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("birthCity");

                    b.Property<string>("BirthCountry")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("birthCountry");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<int?>("BirthDay")
                        .HasColumnType("int")
                        .HasColumnName("birthDay");

                    b.Property<int?>("BirthMonth")
                        .HasColumnType("int")
                        .HasColumnName("birthMonth");

                    b.Property<string>("BirthState")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("birthState");

                    b.Property<int?>("BirthYear")
                        .HasColumnType("int")
                        .HasColumnName("birthYear");

                    b.Property<string>("DeathCity")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("deathCity");

                    b.Property<string>("DeathCountry")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("deathCountry");

                    b.Property<DateOnly?>("DeathDate")
                        .HasColumnType("date")
                        .HasColumnName("death_date");

                    b.Property<int?>("DeathDay")
                        .HasColumnType("int")
                        .HasColumnName("deathDay");

                    b.Property<int?>("DeathMonth")
                        .HasColumnType("int")
                        .HasColumnName("deathMonth");

                    b.Property<string>("DeathState")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("deathState");

                    b.Property<int?>("DeathYear")
                        .HasColumnType("int")
                        .HasColumnName("deathYear");

                    b.Property<string>("Debut")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("debut");

                    b.Property<DateOnly?>("DebutDate")
                        .HasColumnType("date")
                        .HasColumnName("debut_date");

                    b.Property<string>("FinalGame")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("finalGame");

                    b.Property<DateOnly?>("FinalgameDate")
                        .HasColumnType("date")
                        .HasColumnName("finalgame_date");

                    b.Property<int?>("Height")
                        .HasColumnType("int")
                        .HasColumnName("height");

                    b.Property<string>("NameFirst")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nameFirst");

                    b.Property<string>("NameGiven")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nameGiven");

                    b.Property<string>("NameLast")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("nameLast");

                    b.Property<string>("RetroId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("retroID");

                    b.Property<string>("Throws")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("throws");

                    b.Property<int?>("Weight")
                        .HasColumnType("int")
                        .HasColumnName("weight");

                    b.HasKey("PlayerId")
                        .HasName("PRIMARY");

                    b.ToTable("people", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Pitching", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<double?>("Baopp")
                        .HasColumnType("double")
                        .HasColumnName("BAOpp");

                    b.Property<short?>("Bb")
                        .HasColumnType("smallint")
                        .HasColumnName("BB");

                    b.Property<short?>("Bfp")
                        .HasColumnType("smallint")
                        .HasColumnName("BFP");

                    b.Property<short?>("Bk")
                        .HasColumnType("smallint")
                        .HasColumnName("BK");

                    b.Property<short?>("Cg")
                        .HasColumnType("smallint")
                        .HasColumnName("CG");

                    b.Property<short?>("Er")
                        .HasColumnType("smallint")
                        .HasColumnName("ER");

                    b.Property<double?>("Era")
                        .HasColumnType("double")
                        .HasColumnName("ERA");

                    b.Property<short?>("G")
                        .HasColumnType("smallint");

                    b.Property<short?>("Gf")
                        .HasColumnType("smallint")
                        .HasColumnName("GF");

                    b.Property<short?>("Gidp")
                        .HasColumnType("smallint")
                        .HasColumnName("GIDP");

                    b.Property<short?>("Gs")
                        .HasColumnType("smallint")
                        .HasColumnName("GS");

                    b.Property<short?>("H")
                        .HasColumnType("smallint");

                    b.Property<short?>("Hbp")
                        .HasColumnType("smallint")
                        .HasColumnName("HBP");

                    b.Property<short?>("Hr")
                        .HasColumnType("smallint")
                        .HasColumnName("HR");

                    b.Property<short?>("Ibb")
                        .HasColumnType("smallint")
                        .HasColumnName("IBB");

                    b.Property<int?>("Ipouts")
                        .HasColumnType("int")
                        .HasColumnName("IPouts");

                    b.Property<short?>("L")
                        .HasColumnType("smallint");

                    b.Property<string>("LgId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("playerID");

                    b.Property<short?>("R")
                        .HasColumnType("smallint");

                    b.Property<short?>("Sf")
                        .HasColumnType("smallint")
                        .HasColumnName("SF");

                    b.Property<short?>("Sh")
                        .HasColumnType("smallint")
                        .HasColumnName("SH");

                    b.Property<short?>("Sho")
                        .HasColumnType("smallint")
                        .HasColumnName("SHO");

                    b.Property<short?>("So")
                        .HasColumnType("smallint")
                        .HasColumnName("SO");

                    b.Property<short>("Stint")
                        .HasColumnType("smallint")
                        .HasColumnName("stint");

                    b.Property<short?>("Sv")
                        .HasColumnType("smallint")
                        .HasColumnName("SV");

                    b.Property<string>("TeamId")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("teamID")
                        .IsFixedLength();

                    b.Property<int?>("TeamId1")
                        .HasColumnType("int")
                        .HasColumnName("team_ID");

                    b.Property<short?>("W")
                        .HasColumnType("smallint");

                    b.Property<short?>("Wp")
                        .HasColumnType("smallint")
                        .HasColumnName("WP");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LgId" }, "lgID")
                        .HasDatabaseName("lgID12");

                    b.HasIndex(new[] { "PlayerId", "YearId", "Stint" }, "playerID")
                        .IsUnique()
                        .HasDatabaseName("playerID14");

                    b.HasIndex(new[] { "TeamId1" }, "team_ID")
                        .HasDatabaseName("team_ID9");

                    b.ToTable("pitching", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Pitchingpost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<double?>("Baopp")
                        .HasColumnType("double")
                        .HasColumnName("BAOpp");

                    b.Property<short?>("Bb")
                        .HasColumnType("smallint")
                        .HasColumnName("BB");

                    b.Property<short?>("Bfp")
                        .HasColumnType("smallint")
                        .HasColumnName("BFP");

                    b.Property<short?>("Bk")
                        .HasColumnType("smallint")
                        .HasColumnName("BK");

                    b.Property<short?>("Cg")
                        .HasColumnType("smallint")
                        .HasColumnName("CG");

                    b.Property<short?>("Er")
                        .HasColumnType("smallint")
                        .HasColumnName("ER");

                    b.Property<double?>("Era")
                        .HasColumnType("double")
                        .HasColumnName("ERA");

                    b.Property<short?>("G")
                        .HasColumnType("smallint");

                    b.Property<short?>("Gf")
                        .HasColumnType("smallint")
                        .HasColumnName("GF");

                    b.Property<short?>("Gidp")
                        .HasColumnType("smallint")
                        .HasColumnName("GIDP");

                    b.Property<short?>("Gs")
                        .HasColumnType("smallint")
                        .HasColumnName("GS");

                    b.Property<short?>("H")
                        .HasColumnType("smallint");

                    b.Property<short?>("Hbp")
                        .HasColumnType("smallint")
                        .HasColumnName("HBP");

                    b.Property<short?>("Hr")
                        .HasColumnType("smallint")
                        .HasColumnName("HR");

                    b.Property<short?>("Ibb")
                        .HasColumnType("smallint")
                        .HasColumnName("IBB");

                    b.Property<int?>("Ipouts")
                        .HasColumnType("int")
                        .HasColumnName("IPouts");

                    b.Property<short?>("L")
                        .HasColumnType("smallint");

                    b.Property<string>("LgId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("playerID");

                    b.Property<short?>("R")
                        .HasColumnType("smallint");

                    b.Property<string>("Round")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("round");

                    b.Property<short?>("Sf")
                        .HasColumnType("smallint")
                        .HasColumnName("SF");

                    b.Property<short?>("Sh")
                        .HasColumnType("smallint")
                        .HasColumnName("SH");

                    b.Property<short?>("Sho")
                        .HasColumnType("smallint")
                        .HasColumnName("SHO");

                    b.Property<short?>("So")
                        .HasColumnType("smallint")
                        .HasColumnName("SO");

                    b.Property<short?>("Sv")
                        .HasColumnType("smallint")
                        .HasColumnName("SV");

                    b.Property<string>("TeamId")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("teamID")
                        .IsFixedLength();

                    b.Property<int?>("TeamId1")
                        .HasColumnType("int")
                        .HasColumnName("team_ID");

                    b.Property<short?>("W")
                        .HasColumnType("smallint");

                    b.Property<short?>("Wp")
                        .HasColumnType("smallint")
                        .HasColumnName("WP");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LgId" }, "lgID")
                        .HasDatabaseName("lgID13");

                    b.HasIndex(new[] { "PlayerId", "YearId", "Round" }, "playerID")
                        .IsUnique()
                        .HasDatabaseName("playerID15");

                    b.HasIndex(new[] { "TeamId1" }, "team_ID")
                        .HasDatabaseName("team_ID10");

                    b.ToTable("pitchingpost", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Richjsontagdatum", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    b.Property<string>("TagRichDetail")
                        .HasColumnType("json")
                        .HasColumnName("tag_rich_detail");

                    b.ToTable("richjsontagdata", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.School", b =>
                {
                    b.Property<string>("SchoolId")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("schoolID");

                    b.Property<string>("City")
                        .HasMaxLength(55)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(55)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("country");

                    b.Property<string>("NameFull")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name_full");

                    b.Property<string>("State")
                        .HasMaxLength(55)
                        .HasColumnType("varchar(55)")
                        .HasColumnName("state");

                    b.HasKey("SchoolId");

                    b.ToTable("schools", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Tag", b =>
                {
                    b.Property<string>("TagId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TagId"), "utf8");

                    b.Property<string>("DataFieldReferencesAsJson")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DataFieldReferencesAsJson"), "utf8");

                    b.Property<string>("TagValue")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TagValue"), "utf8");

                    b.HasKey("TagId");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Tagrelationship", b =>
                {
                    b.Property<string>("TagRelationshipId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TagRelationshipId"), "utf8");

                    b.Property<string>("DataEntityId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DataEntityId"), "utf8");

                    b.Property<string>("TagId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TagId"), "utf8");

                    b.HasKey("TagRelationshipId");

                    b.ToTable("tagrelationships", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<short?>("Ab")
                        .HasColumnType("smallint")
                        .HasColumnName("AB");

                    b.Property<int?>("Attendance")
                        .HasColumnType("int")
                        .HasColumnName("attendance");

                    b.Property<short?>("Bb")
                        .HasColumnType("smallint")
                        .HasColumnName("BB");

                    b.Property<short?>("Bba")
                        .HasColumnType("smallint")
                        .HasColumnName("BBA");

                    b.Property<int?>("Bpf")
                        .HasColumnType("int")
                        .HasColumnName("BPF");

                    b.Property<short?>("Cg")
                        .HasColumnType("smallint")
                        .HasColumnName("CG");

                    b.Property<short?>("Cs")
                        .HasColumnType("smallint")
                        .HasColumnName("CS");

                    b.Property<string>("DivId")
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .HasColumnName("divID")
                        .IsFixedLength();

                    b.Property<int?>("DivId1")
                        .HasColumnType("int")
                        .HasColumnName("div_ID");

                    b.Property<string>("DivWin")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<int?>("Dp")
                        .HasColumnType("int")
                        .HasColumnName("DP");

                    b.Property<int?>("E")
                        .HasColumnType("int");

                    b.Property<short?>("Er")
                        .HasColumnType("smallint")
                        .HasColumnName("ER");

                    b.Property<double?>("Era")
                        .HasColumnType("double")
                        .HasColumnName("ERA");

                    b.Property<double?>("Fp")
                        .HasColumnType("double")
                        .HasColumnName("FP");

                    b.Property<string>("FranchId")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("franchID");

                    b.Property<short?>("G")
                        .HasColumnType("smallint");

                    b.Property<short?>("Ghome")
                        .HasColumnType("smallint");

                    b.Property<short?>("H")
                        .HasColumnType("smallint");

                    b.Property<short?>("Ha")
                        .HasColumnType("smallint")
                        .HasColumnName("HA");

                    b.Property<short?>("Hbp")
                        .HasColumnType("smallint")
                        .HasColumnName("HBP");

                    b.Property<short?>("Hr")
                        .HasColumnType("smallint")
                        .HasColumnName("HR");

                    b.Property<short?>("Hra")
                        .HasColumnType("smallint")
                        .HasColumnName("HRA");

                    b.Property<int?>("Ipouts")
                        .HasColumnType("int")
                        .HasColumnName("IPouts");

                    b.Property<short?>("L")
                        .HasColumnType("smallint");

                    b.Property<string>("LgId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<string>("LgWin")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Park")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("park");

                    b.Property<int?>("Ppf")
                        .HasColumnType("int")
                        .HasColumnName("PPF");

                    b.Property<short?>("R")
                        .HasColumnType("smallint");

                    b.Property<short?>("Ra")
                        .HasColumnType("smallint")
                        .HasColumnName("RA");

                    b.Property<short?>("Sb")
                        .HasColumnType("smallint")
                        .HasColumnName("SB");

                    b.Property<short?>("Sf")
                        .HasColumnType("smallint")
                        .HasColumnName("SF");

                    b.Property<short?>("Sho")
                        .HasColumnType("smallint")
                        .HasColumnName("SHO");

                    b.Property<short?>("So")
                        .HasColumnType("smallint")
                        .HasColumnName("SO");

                    b.Property<short?>("Soa")
                        .HasColumnType("smallint")
                        .HasColumnName("SOA");

                    b.Property<short?>("Sv")
                        .HasColumnType("smallint")
                        .HasColumnName("SV");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("teamID")
                        .IsFixedLength();

                    b.Property<string>("TeamIdbr")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("teamIDBR");

                    b.Property<string>("TeamIdlahman45")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("teamIDlahman45");

                    b.Property<string>("TeamIdretro")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("teamIDretro");

                    b.Property<short?>("TeamRank")
                        .HasColumnType("smallint")
                        .HasColumnName("teamRank");

                    b.Property<short?>("W")
                        .HasColumnType("smallint");

                    b.Property<string>("Wcwin")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("WCWin");

                    b.Property<string>("Wswin")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("WSWin");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.Property<short?>("_2b")
                        .HasColumnType("smallint")
                        .HasColumnName("2B");

                    b.Property<short?>("_3b")
                        .HasColumnType("smallint")
                        .HasColumnName("3B");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DivId1" }, "div_ID");

                    b.HasIndex(new[] { "FranchId" }, "franchID");

                    b.HasIndex(new[] { "LgId" }, "lgID")
                        .HasDatabaseName("lgID14");

                    b.HasIndex(new[] { "YearId", "LgId", "TeamId" }, "yearID")
                        .IsUnique()
                        .HasDatabaseName("yearID2");

                    b.ToTable("teams", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Teamsfranchise", b =>
                {
                    b.Property<string>("FranchId")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("franchID");

                    b.Property<string>("Active")
                        .HasMaxLength(1)
                        .HasColumnType("char(1)")
                        .HasColumnName("active")
                        .IsFixedLength();

                    b.Property<string>("FranchName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("franchName");

                    b.Property<string>("Naassoc")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("NAassoc");

                    b.HasKey("FranchId")
                        .HasName("PRIMARY");

                    b.ToTable("teamsfranchises", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Teamshalf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("DivId")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("divID");

                    b.Property<int?>("DivId1")
                        .HasColumnType("int")
                        .HasColumnName("div_ID");

                    b.Property<string>("DivWin")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<short?>("G")
                        .HasColumnType("smallint");

                    b.Property<string>("Half")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<short?>("L")
                        .HasColumnType("smallint");

                    b.Property<string>("LgId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("lgID")
                        .IsFixedLength();

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("teamID")
                        .IsFixedLength();

                    b.Property<int?>("TeamId1")
                        .HasColumnType("int")
                        .HasColumnName("team_ID");

                    b.Property<short?>("TeamRank")
                        .HasColumnType("smallint")
                        .HasColumnName("teamRank");

                    b.Property<short?>("W")
                        .HasColumnType("smallint");

                    b.Property<short>("YearId")
                        .HasColumnType("smallint")
                        .HasColumnName("yearID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DivId1" }, "div_ID")
                        .HasDatabaseName("div_ID1");

                    b.HasIndex(new[] { "LgId" }, "lgID")
                        .HasDatabaseName("lgID15");

                    b.HasIndex(new[] { "TeamId1" }, "team_ID")
                        .HasDatabaseName("team_ID11");

                    b.HasIndex(new[] { "YearId", "LgId", "TeamId", "Half" }, "yearID")
                        .IsUnique()
                        .HasDatabaseName("yearID3");

                    b.ToTable("teamshalf", (string)null);
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Allstarfull", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Allstarfulls")
                        .HasForeignKey("LgId")
                        .HasConstraintName("allstarfull_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Team", "TeamId1Navigation")
                        .WithMany("Allstarfulls")
                        .HasForeignKey("TeamId1")
                        .HasConstraintName("allstarfull_ibfk_2");

                    b.Navigation("Lg");

                    b.Navigation("TeamId1Navigation");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Appearance", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany()
                        .HasForeignKey("LgId")
                        .HasConstraintName("appearances_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("appearances_ibfk_3");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Team", "TeamId1Navigation")
                        .WithMany()
                        .HasForeignKey("TeamId1")
                        .HasConstraintName("appearances_ibfk_2");

                    b.Navigation("Lg");

                    b.Navigation("Player");

                    b.Navigation("TeamId1Navigation");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Awardsmanager", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany()
                        .HasForeignKey("LgId")
                        .IsRequired()
                        .HasConstraintName("awardsmanagers_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("awardsmanagers_ibfk_2");

                    b.Navigation("Lg");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Awardsplayer", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Awardsplayers")
                        .HasForeignKey("LgId")
                        .HasConstraintName("awardsplayers_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany("Awardsplayers")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("awardsplayers_ibfk_2");

                    b.Navigation("Lg");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Awardssharemanager", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Awardssharemanagers")
                        .HasForeignKey("LgId")
                        .IsRequired()
                        .HasConstraintName("awardssharemanagers_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany("Awardssharemanagers")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("awardssharemanagers_ibfk_2");

                    b.Navigation("Lg");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Awardsshareplayer", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Awardsshareplayers")
                        .HasForeignKey("LgId")
                        .IsRequired()
                        .HasConstraintName("awardsshareplayers_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany("Awardsshareplayers")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("awardsshareplayers_ibfk_2");

                    b.Navigation("Lg");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Batting", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Battings")
                        .HasForeignKey("LgId")
                        .HasConstraintName("batting_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany("Battings")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("batting_ibfk_3");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Team", "TeamId1Navigation")
                        .WithMany("Battings")
                        .HasForeignKey("TeamId1")
                        .HasConstraintName("batting_ibfk_2");

                    b.Navigation("Lg");

                    b.Navigation("Player");

                    b.Navigation("TeamId1Navigation");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Battingpost", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Battingposts")
                        .HasForeignKey("LgId")
                        .HasConstraintName("battingpost_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany("Battingposts")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("battingpost_ibfk_3");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Team", "TeamId1Navigation")
                        .WithMany("Battingposts")
                        .HasForeignKey("TeamId1")
                        .HasConstraintName("battingpost_ibfk_2");

                    b.Navigation("Lg");

                    b.Navigation("Player");

                    b.Navigation("TeamId1Navigation");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Collegeplaying", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany("Collegeplayings")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("collegeplaying_ibfk_2");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.School", "School")
                        .WithMany("Collegeplayings")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("collegeplaying_ibfk_1");

                    b.Navigation("Player");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Division", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Divisions")
                        .HasForeignKey("LgId")
                        .IsRequired()
                        .HasConstraintName("divisions_ibfk_1");

                    b.Navigation("Lg");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Fielding", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Fieldings")
                        .HasForeignKey("LgId")
                        .HasConstraintName("fielding_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany("Fieldings")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("fielding_ibfk_3");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Team", "TeamId1Navigation")
                        .WithMany("Fieldings")
                        .HasForeignKey("TeamId1")
                        .HasConstraintName("fielding_ibfk_2");

                    b.Navigation("Lg");

                    b.Navigation("Player");

                    b.Navigation("TeamId1Navigation");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Fieldingof", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany("Fieldingofs")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("fieldingof_ibfk_1");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Fieldingofsplit", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Fieldingofsplits")
                        .HasForeignKey("LgId")
                        .HasConstraintName("fieldingofsplit_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany("Fieldingofsplits")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("fieldingofsplit_ibfk_3");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Team", "TeamId1Navigation")
                        .WithMany("Fieldingofsplits")
                        .HasForeignKey("TeamId1")
                        .HasConstraintName("fieldingofsplit_ibfk_2");

                    b.Navigation("Lg");

                    b.Navigation("Player");

                    b.Navigation("TeamId1Navigation");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Fieldingpost", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Fieldingposts")
                        .HasForeignKey("LgId")
                        .HasConstraintName("fieldingpost_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany("Fieldingposts")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("fieldingpost_ibfk_3");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Team", "TeamId1Navigation")
                        .WithMany("Fieldingposts")
                        .HasForeignKey("TeamId1")
                        .HasConstraintName("fieldingpost_ibfk_2");

                    b.Navigation("Lg");

                    b.Navigation("Player");

                    b.Navigation("TeamId1Navigation");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Halloffame", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany("Halloffames")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("halloffame_ibfk_1");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Homegame", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "LeaguekeyNavigation")
                        .WithMany("Homegames")
                        .HasForeignKey("Leaguekey")
                        .HasConstraintName("homegames_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Park", "Park")
                        .WithMany("Homegames")
                        .HasForeignKey("ParkId")
                        .HasConstraintName("homegames_ibfk_3");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Team", "Team")
                        .WithMany("Homegames")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("homegames_ibfk_2");

                    b.Navigation("LeaguekeyNavigation");

                    b.Navigation("Park");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Manager", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Managers")
                        .HasForeignKey("LgId")
                        .HasConstraintName("managers_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany("Managers")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("managers_ibfk_3");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Team", "TeamId1Navigation")
                        .WithMany("Managers")
                        .HasForeignKey("TeamId1")
                        .HasConstraintName("managers_ibfk_2");

                    b.Navigation("Lg");

                    b.Navigation("Player");

                    b.Navigation("TeamId1Navigation");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Managershalf", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Managershalves")
                        .HasForeignKey("LgId")
                        .HasConstraintName("managershalf_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany("Managershalves")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("managershalf_ibfk_3");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Team", "TeamId1Navigation")
                        .WithMany("Managershalves")
                        .HasForeignKey("TeamId1")
                        .HasConstraintName("managershalf_ibfk_2");

                    b.Navigation("Lg");

                    b.Navigation("Player");

                    b.Navigation("TeamId1Navigation");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Pitching", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Pitchings")
                        .HasForeignKey("LgId")
                        .HasConstraintName("pitching_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany("Pitchings")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("pitching_ibfk_3");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Team", "TeamId1Navigation")
                        .WithMany("Pitchings")
                        .HasForeignKey("TeamId1")
                        .HasConstraintName("pitching_ibfk_2");

                    b.Navigation("Lg");

                    b.Navigation("Player");

                    b.Navigation("TeamId1Navigation");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Pitchingpost", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Pitchingposts")
                        .HasForeignKey("LgId")
                        .HasConstraintName("pitchingpost_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Person", "Player")
                        .WithMany("Pitchingposts")
                        .HasForeignKey("PlayerId")
                        .IsRequired()
                        .HasConstraintName("pitchingpost_ibfk_3");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Team", "TeamId1Navigation")
                        .WithMany("Pitchingposts")
                        .HasForeignKey("TeamId1")
                        .HasConstraintName("pitchingpost_ibfk_2");

                    b.Navigation("Lg");

                    b.Navigation("Player");

                    b.Navigation("TeamId1Navigation");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Team", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Division", "DivId1Navigation")
                        .WithMany("Teams")
                        .HasForeignKey("DivId1")
                        .HasConstraintName("teams_ibfk_2");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Teamsfranchise", "Franch")
                        .WithMany("Teams")
                        .HasForeignKey("FranchId")
                        .HasConstraintName("teams_ibfk_3");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Teams")
                        .HasForeignKey("LgId")
                        .HasConstraintName("teams_ibfk_1");

                    b.Navigation("DivId1Navigation");

                    b.Navigation("Franch");

                    b.Navigation("Lg");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Teamshalf", b =>
                {
                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Division", "DivId1Navigation")
                        .WithMany("Teamshalves")
                        .HasForeignKey("DivId1")
                        .HasConstraintName("teamshalf_ibfk_2");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.League", "Lg")
                        .WithMany("Teamshalves")
                        .HasForeignKey("LgId")
                        .IsRequired()
                        .HasConstraintName("teamshalf_ibfk_1");

                    b.HasOne("Baseball.ApiSharp.Data.Lahman.Team", "TeamId1Navigation")
                        .WithMany("Teamshalves")
                        .HasForeignKey("TeamId1")
                        .HasConstraintName("teamshalf_ibfk_3");

                    b.Navigation("DivId1Navigation");

                    b.Navigation("Lg");

                    b.Navigation("TeamId1Navigation");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Division", b =>
                {
                    b.Navigation("Teams");

                    b.Navigation("Teamshalves");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.League", b =>
                {
                    b.Navigation("Allstarfulls");

                    b.Navigation("Awardsplayers");

                    b.Navigation("Awardssharemanagers");

                    b.Navigation("Awardsshareplayers");

                    b.Navigation("Battingposts");

                    b.Navigation("Battings");

                    b.Navigation("Divisions");

                    b.Navigation("Fieldingofsplits");

                    b.Navigation("Fieldingposts");

                    b.Navigation("Fieldings");

                    b.Navigation("Homegames");

                    b.Navigation("Managers");

                    b.Navigation("Managershalves");

                    b.Navigation("Pitchingposts");

                    b.Navigation("Pitchings");

                    b.Navigation("Teams");

                    b.Navigation("Teamshalves");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Park", b =>
                {
                    b.Navigation("Homegames");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Person", b =>
                {
                    b.Navigation("Awardsplayers");

                    b.Navigation("Awardssharemanagers");

                    b.Navigation("Awardsshareplayers");

                    b.Navigation("Battingposts");

                    b.Navigation("Battings");

                    b.Navigation("Collegeplayings");

                    b.Navigation("Fieldingofs");

                    b.Navigation("Fieldingofsplits");

                    b.Navigation("Fieldingposts");

                    b.Navigation("Fieldings");

                    b.Navigation("Halloffames");

                    b.Navigation("Managers");

                    b.Navigation("Managershalves");

                    b.Navigation("Pitchingposts");

                    b.Navigation("Pitchings");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.School", b =>
                {
                    b.Navigation("Collegeplayings");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Team", b =>
                {
                    b.Navigation("Allstarfulls");

                    b.Navigation("Battingposts");

                    b.Navigation("Battings");

                    b.Navigation("Fieldingofsplits");

                    b.Navigation("Fieldingposts");

                    b.Navigation("Fieldings");

                    b.Navigation("Homegames");

                    b.Navigation("Managers");

                    b.Navigation("Managershalves");

                    b.Navigation("Pitchingposts");

                    b.Navigation("Pitchings");

                    b.Navigation("Teamshalves");
                });

            modelBuilder.Entity("Baseball.ApiSharp.Data.Lahman.Teamsfranchise", b =>
                {
                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
